#!/usr/bin/env python

import sys, os
from subprocess import call

genome_size=300000000 # can be obtained by examining histograms.dat from kmergenie
min_abundance=3 # should be computed by kmergenie (not trivial)
prefix="assembly"

doc = """GATB Pipeline

Usage:
    %s [arguments]

Arguments:
    -p interleaved_paired_reads        interleaved FASTA or FASTQ paired reads
    -p paired_reads1 [paired_reads2]   two FASTA or FASTQ paired reads (non-interleaved)
    -u unpaired_reads                  unpaired FASTA or FASTQ reads

""" % (sys.argv[0])

paired_reads = []
unpaired_reads = []

try:
    for i,arg in enumerate(sys.argv):
        if arg == "-p":
           print "a",arg,sys.argv[i+1]
           if i+2 >= len(sys.argv) or sys.argv[i+2][0] == "-":
               # interleaved case
               paired_reads.append(sys.argv[i+1])
           else:
               # non-interleaved case
               paired_reads.append( sys.argv[i+1] + " " + sys.argv[i+2])
        elif arg == "-u":
           unpaired_reads.append(sys.argv[i+1])
    if len(paired_reads) + len(unpaired_reads) == 0:
        raise Exception 
except:
    print doc
    sys.exit(1)


DIR = os.path.dirname(os.path.realpath(__file__))

def execute(program, cmdline="", interpreter=""):
    try:
        return call("%s %s/%s %s" % (interpreter, DIR, program, cmdline), shell=True)
    except OSError as e:
        print >>sys.stderr, "Execution of '%s' with command-line '%s' failed:" % (program, cmdline), e

# create of flat text file with all reads
list_reads = prefix + ".list_reads"
with open(list_reads,"w") as f:
    for read in paired_reads + unpaired_reads:
            f.write( "\n".join(read.strip().split("\n")) +"\n")

# ------------------------------
# kmergenie

print "running kmergenie"

k = execute('kmergenie/kmergenie', "%s -e 100" % list_reads)
# -e 1 is for tiny genomes, -e 10 is for bacterial, -e 1000 is for eukaryotic. some day this is will be auto-computed by kmergenie

print "best k:", k

if k == 0:
    print "kmergenie could not detect a best k; aborting"
    sys.exit(1)

# ------------------------------
# minia

print "compiling minia to support k=%d" % k

call("make k=%d -C %s/minia/" % (k, DIR), shell=True)

print "running minia"

k = execute('minia/minia', "%s %d %d %d %s" % (list_reads, k, min_abundance, genome_size, prefix))
contigs = prefix + ".contigs.fa"

# ------------------------------
# superscaffolder

def superscaffolder(contigs,library,output_filename=""):
    execute("superscaffolder/superscaffolding.py", "%s %s -o %s" % (contigs, library, output_filename), "python")

# scaffolding all libraries
for i, paired_read in enumerate(paired_reads):
    input_file = prefix + ".scaffolds%d.fa" % i if i > 0 else contigs
    output_file = prefix + ".scaffolds%d.fa" % (i+1)
    superscaffolder(input_file,paired_read,output_file)

print "pipeline finished!!"
